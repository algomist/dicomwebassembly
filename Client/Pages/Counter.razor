@page "/counter"
@inject HttpClient Http

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>
<p role="status">Message from leader: @_messageFromLeader</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<button class="btn btn-primary" @onclick="MessageTheLeader">Click me</button>

@code {
    private int currentCount = 0;
    private string _messageFromLeader = "<no message>";

    private void IncrementCount()
    {
        currentCount++;
    }

    private async Task MessageTheLeader()
    {
        _messageFromLeader = "Talking to leader";

        _messageFromLeader = await Http.GetStringAsync("/api/HelloLeader");
    }
}

<FileSelect @ref="imageFileSelect" FilesSelected="ImageFileSelectedHandler"></FileSelect>

<div class="row">
    <div class="col-sm-6">
        <div>
            <button @onclick="SelectFiles">Select Files</button>
        </div>
        @if (errorMessage != null)
        {

            <div class="alert alert-warning" role="alert">
                @errorMessage
                <button type="button" class="close" aria-label="Close" @onclick="@CloseErrorAlert">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
        }
    </div>
</div>

@if (imageFileUrl != null)
{
    <hr />
    <div>
        <div style="margin: 10px;">
            <img src="@imageFileUrl" style="width: 400px;" />
        </div>
        <div>
            <h5>Load the image data into .NET</h5>
            <button class="btn btn-primary" @onclick="@LoadSelectedImageFile">Load Image</button>
        </div>
        <div>
            Is Loaded: @imageFile.IsLoaded
        </div>
        <div>
            Loaded Size: @imageFile.LoadedSize
        </div>
    </div>
}

@code 
{
    // Component reference
    FileSelect imageFileSelect;

    LoadFile imageFile;

    string imageFileUrl;
    string errorMessage;


    void SelectFiles() =>
        imageFileSelect.SelectFiles();

    // Handle the file selection event
    async Task ImageFileSelectedHandler(SelectedFile[] selectedFiles)
    {
        imageFile = new LoadFile()
        {
            SelectedFile = selectedFiles.FirstOrDefault(),
            IsLoaded = false,
            LoadedSize = 0
        };

        try
        {
    // load the blob url and dispaly the image
            imageFileUrl = await imageFileSelect.GetFileBlobUrlAsync(imageFile.SelectedFile.Name);
    //StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    async Task LoadSelectedImageFile()
    {
        try
        {
            var imageData = await imageFileSelect.GetFileBytesAsync(imageFile.SelectedFile.Name);
            imageFile.IsLoaded = true;
            imageFile.LoadedSize = imageData.Length;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    void CloseErrorAlert()
    {
        ResetErrorState();
    }

    void ResetErrorState()
    {
        errorMessage = null;
    }
}