@page "/"

@inject HttpClient Http
@using FellowOakDicom;


<PageTitle>DICOM File Load Experiment</PageTitle>

<h1>DICOM Hello World</h1>


<FileSelect @ref="dicomFileSelect" FilesSelected="DicomFileSelectedHandler"></FileSelect>

<div class="row">
    <div class="col-sm-6">
        <div>
            <button class="btn btn-primary" @onclick="SelectDicomFiles">Select DICOM File</button>
        </div>
        @if (errorMessage != null)
        {
            <div class="alert alert-warning" role="alert">
                @errorMessage
                <button type="button" class="close" aria-label="Close" @onclick="@CloseErrorAlert">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
        }
    </div>
</div>

@if (dicomFileUrl != null)
{
    <hr />
    <div>
        <div>
            <h5>Load the image data into .NET</h5>
            <button class="btn btn-primary" @onclick="@LoadSelectedDicomFile">Load DICOM</button>
        </div>
        <div>
            File: @dicomFile?.SelectedFile?.Name
        </div>
        <div>
            Is Loaded: @dicomFile?.IsLoaded
        </div>
        <div>
            Loaded Size: @dicomFile?.LoadedSize
        </div>
        @if (dicomData != null)
        {
            <div>
                DICOM File Format: @dicomData.Format
            </div>
            <div>
                Patient ID: @dicomData.Dataset.GetString(DicomTag.PatientID);
            </div>
        }
    </div>
}

@code 
{
    // Component reference
    FileSelect? imageFileSelect = null;

    LoadFile? imageFile;

    // Component reference
    FileSelect? dicomFileSelect;

    LoadFile? dicomFile;


    string? dicomFileUrl;
    string? imageFileUrl;
    string? errorMessage;

    DicomFile? dicomData;


    void SelectFiles() =>
        imageFileSelect?.SelectFiles();

    void SelectDicomFiles() =>
        dicomFileSelect?.SelectFiles();

    // Handle the file selection event
    async Task ImageFileSelectedHandler(SelectedFile[] selectedFiles)
    {
        imageFile = new LoadFile()
        {
            SelectedFile = selectedFiles.FirstOrDefault(),
            IsLoaded = false,
            LoadedSize = 0
        };

        try
        {
            // load the blob url and dispaly the image
            if (string.IsNullOrEmpty(imageFile?.SelectedFile?.Name))
            {
                throw new ArgumentNullException("Selected file name can't be null or empty");
            }
            imageFileUrl = imageFileSelect != null ? await imageFileSelect.GetFileBlobUrlAsync(imageFile.SelectedFile.Name) : null;
            //StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    async Task LoadSelectedImageFile()
    {
        try
        {
            if (string.IsNullOrEmpty(imageFile?.SelectedFile?.Name))
            {
                throw new ArgumentNullException("Selected file name can't be null or empty");
            }

            var imageData = imageFileSelect != null ? await imageFileSelect.GetFileBytesAsync(imageFile.SelectedFile.Name)
                : Array.Empty<byte>();
            imageFile.IsLoaded = true;
            imageFile.LoadedSize = imageData.Length;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    async Task DicomFileSelectedHandler(SelectedFile[] selectedFiles)
    {
        dicomFile = new LoadFile
        {
            SelectedFile = selectedFiles.FirstOrDefault(),
            IsLoaded = false,
            LoadedSize = 0
        };

        try
        {
            if (string.IsNullOrEmpty(dicomFile?.SelectedFile?.Name))
            {
                throw new ArgumentNullException("Selected file name can't be null or empty");
            }

            dicomFileUrl = dicomFileSelect != null ? await dicomFileSelect.GetFileBlobUrlAsync(dicomFile.SelectedFile.Name) : null;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    async Task LoadSelectedDicomFile()
    {
        try
        {
            if (string.IsNullOrEmpty(dicomFile?.SelectedFile?.Name))
            {
                throw new ArgumentNullException("Selected file name can't be null or empty");
            }

            var byteData = dicomFileSelect != null ? await dicomFileSelect.GetFileBytesAsync(dicomFile.SelectedFile.Name)
                : Array.Empty<byte>();
            dicomFile.IsLoaded = true;
            dicomFile.LoadedSize = byteData.Length;

            await using var memoryStream = new MemoryStream(byteData);

            dicomData = await DicomFile.OpenAsync(memoryStream);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    void CloseErrorAlert()
    {
        ResetErrorState();
    }

    void ResetErrorState()
    {
        errorMessage = null;
    }
}