@page "/"
@using global::IntegrationClient
@inject ServiceClient client; 
@inject HttpClient Http
@using FellowOakDicom;
@using FellowOakDicom.Imaging
@using Blazor.Extensions.Canvas.Canvas2D
@using Blazor.Extensions
@using Blazor.Extensions.Canvas

<PageTitle>DICOM File Load Experiment</PageTitle>

<h1>DICOM Hello World</h1>

<FileSelect @ref="dicomFileSelect" FilesSelected="DicomFileSelectedHandler"></FileSelect>

<div class="row">
    <div class="col-sm-6">
        <div>
            <button class="btn btn-primary" @onclick="SelectDicomFiles">Select DICOM File</button>
        </div>
        @if (errorMessage != null)
        {
            <div class="alert alert-warning" role="alert">
                @errorMessage
                <button type="button" class="close" aria-label="Close" @onclick="@CloseErrorAlert">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
        }
        @if (dicomFileUrl != null)
        {
            <hr />
            <div>
                File: @dicomFile?.SelectedFile?.Name
            </div>
            <div>
                Is Loaded: @dicomFile?.IsLoaded
            </div>
            <div>
                Loaded Size: @dicomFile?.LoadedSize
            </div>
            @if (dicomData != null)
            {
                <div>
                    DICOM File Format: @dicomData.Format
                </div>
                <div>
                    Patient ID: @dicomData.Dataset.GetString(DicomTag.PatientID);
                </div>
            }
            @if (anonimized_patientId != null)
            {
                <div>
                   Anonimized Patient ID: @anonimized_patientId
                </div>
            }
        }
        @if (dicomImage != null)
        {
            <div>
                DICOM Image Width: @dicomImage.Width
            </div>
            <div>
                DICOM Image Height: @dicomImage.Height
            </div>
        }
    </div>
</div>

<BECanvas Width="600" Height="600" @ref="_canvasReference" ></BECanvas>

@code 
{
    // Component reference
    private FileSelect? dicomFileSelect;
    private LoadFile? dicomFile;
    private string? dicomFileUrl;
    private string? errorMessage;
    private string? anonimized_patientId;
    private DicomFile? dicomData;
    private DicomImage? dicomImage;
    private Canvas2DContext? _context;
    private BECanvasComponent? _canvasReference;

    private void SelectDicomFiles() =>
        dicomFileSelect?.SelectFiles();

    private async Task DicomFileSelectedHandler(SelectedFile[] selectedFiles)
    {
        dicomFile = new LoadFile
        {
            SelectedFile = selectedFiles.FirstOrDefault(),
            IsLoaded = false,
            LoadedSize = 0
        };

        try
        {
            if (string.IsNullOrEmpty(dicomFile?.SelectedFile?.Name))
            {
                throw new ArgumentNullException("Selected file name can't be null or empty");
            }

            dicomFileUrl = dicomFileSelect != null ? await dicomFileSelect.GetFileBlobUrlAsync(dicomFile.SelectedFile.Name) : null;

            if (dicomFileUrl != null)
            {
                var byteData = dicomFileSelect != null ? await dicomFileSelect.GetFileBytesAsync(dicomFile.SelectedFile.Name)
                    : Array.Empty<byte>();
                dicomFile.IsLoaded = true;
                dicomFile.LoadedSize = byteData.Length;
                await using var memoryStream = new MemoryStream(byteData);
                dicomData = await DicomFile.OpenAsync(memoryStream);
                dicomImage = new DicomImage(dicomData.Dataset);

                anonimized_patientId = await client.AnonymizeDICOM(byteData);
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private void CloseErrorAlert()
    {
        ResetErrorState();
    }

    private void ResetErrorState()
    {
        errorMessage = null;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        this._context = await this._canvasReference.CreateCanvas2DAsync();
        await this._context.SetFillStyleAsync("Green");

        await this._context.FillRectAsync(0, 0, 600, 600);
    }
}